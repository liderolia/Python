# 1) Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

my_list = [123, 45.6, 'text', True, None]
print(my_list)
for el in range(len(my_list)):
    print(f'"{my_list[el]}":\t{type(my_list[el])}')


# 2) Для списка реализовать обмен значений соседних элементов,
# т.е. значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().

my_set = input('Введите значения списка через пробел: ')
my_list = list(my_set.split())
print(my_list)
el = 0
for element in range(int(len(my_list)/2)):
        my_list[el], my_list[el + 1] = my_list [el + 1], my_list[el]
        el += 2
print(my_list)


# 3) Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

month = int(input('Введите месяц в числовом формате (от 1 до 12): '))
while month < 1 or month > 12:
    print('Некорректный ввод')
    month = int(input('Введите месяц в числовом формате (от 1 до 12): '))
seasons_list = ['зима', 'весна', 'лето', 'осень']
seasons_dict = {1 : 'зима', 2 :  'весна', 3 :  'лето', 4 :  'осень'}
if month < 3 or month == 12:
    print(f'Ваш месяц: {seasons_list[0]}')
    print(f'Данный месяц: {seasons_dict.get(1)}')
elif 2 < month < 6:
    print(f'Ваш месяц: {seasons_list[1]}')
    print(f'Данный месяц: {seasons_dict.get(2)}')
elif 5 < month < 9:
    print(f'Ваш месяц: {seasons_list[2]}')
    print(f'Данный месяц: {seasons_dict.get(3)}')
elif 8 < month < 12:
    print(f'Ваш месяц: {seasons_list[3]}')
    print(f'Данный месяц: {seasons_dict.get(4)}')


# 4) Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
# Если в слово длинное, выводить только первые 10 букв в слове.

my_set = input("Введите строку через пробел: ")
my_list = list(my_set.split())
element = 1
for el in range(int(len(my_list))):
    if len(str(my_list)) <= 10:
        print(f"{element}: {my_list[el]}")
        element += 1
    else:
        print(f"{element}: {my_list[el] [0:10]}")
        element += 1


# 5) Реализовать структуру «Рейтинг», представляющую собой не возрастающий
# набор натуральных чисел. У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 3, 3, 2]
print(f"Рейтинг - {(my_list)}")
my_number = int(input('Введите новый элемент рейтинга: '))
for el in range(len(my_list)):
    if my_list[el] == my_number:
        my_list.insert(el + 1, my_number)
        break
    elif my_list[0] < my_number:
        my_list.insert(0, my_number)
        break
    elif my_list[-1] > my_number:
        my_list.append(my_number)
        break
    elif my_list[el] > my_number and my_list[el + 1] < my_number:
        my_list.insert(el + 1, my_number)
        break
print(f'Результат: {my_list}')


# 6) *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара
# и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

goods = []
my_list = {}
analitics = {}
my_analis_name = []
my_analis_price = []
my_analis_quantity = []
my_analis_unit = []
i_count = 0
count_goods = int(input('Введите количество товаров: '))
while i_count < count_goods:
    item_name = input("введите название: ")
    item_price = int(input("Введите цену: "))
    item_quantity = int(input('Введите количество: '))
    item_unit = input("Введите единицу измерения: ")
    my_list = dict({'название': item_name, 'цена': item_price,
                    'количество': item_quantity, 'eд': item_unit})
    my_analis_name.append(item_name)
    my_analis_price.append(item_price)
    my_analis_quantity.append(item_quantity)
    my_analis_unit.append(item_unit)
    i_count += 1
    goods.append(tuple([i_count, my_list]))
    analitics = dict({'название': my_analis_name, 'цена': my_analis_price,
                      'количество': my_analis_quantity, 'eд': my_analis_unit})
print()
print(goods)
print()
print(analitics)
